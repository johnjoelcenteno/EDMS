@page "/request-management"
@using DPWH.EDMS.Api.Contracts
@using DPWH.EDMS.Components.Helpers

@inherits RequestManagementBase

@attribute [Authorize(Policy = "RequireActiveRoles")]

<TelerikMediaQuery Media="(max-width: 480px)" OnChange="((changed) => XSmall = changed)"></TelerikMediaQuery>

<EdmsBreadcrumbs Data="@BreadcrumbItems" />
<EdmsLoader Visible="@IsLoading" />

<h3>Request Management</h3>

<hr />

<div class="d-flex flex-row mt-3">
    <TelerikCard Width="100%">
        <CardBody>
            <div class="d-flex flex-row justify-content-between">
                <CardTitle Class="mb-0">Request List</CardTitle>
                <TelerikButton Class="mb-2"
                               Icon="@FontIcon.Plus"
                               ThemeColor="@ThemeConstants.Button.ThemeColor.Primary"
                               OnClick="GoToAddNewRequest">
                    Add Request
                </TelerikButton>
            </div>
            <TelerikTabStrip ActiveTabIndexChanged="async(index) => TabChangedHandler(index)">                
                @foreach (var state in RequestStates)
                {
                    <TabStripTab Title="@state">
                        @LoadGrid()
                    </TabStripTab>                                       
                }               
            </TelerikTabStrip>
        </CardBody>
    </TelerikCard>
</div>

@code {
    private RenderFragment LoadGrid()
    {
        return @<div>
        @if (RequestRecords != null && !XSmall)
        {
        <TelerikGrid TItem="EmployeeModel"
                     @bind-PageSize="@PageSize"
                     Height="@GridHeight"
                     FilterMode="GridFilterMode.FilterRow"
                     Sortable=true
                     Pageable=true
                     Data="RequestRecords" 
                     @ref="GridRef"
                     Context="item"
                     OnRowClick="GoToSelectedItemOverview">
            <GridSettings>
                <GridPagerSettings PageSizes="@PageSizes">
                </GridPagerSettings>
            </GridSettings>
            <GridColumns>
                <GridColumn Field=@nameof(EmployeeModel.ControlNumber) Title="Control No." />
                <GridColumn Field=@nameof(EmployeeModel.FullName) Title="Fullname" />
                <GridColumn Field=@nameof(EmployeeModel.DateRequested) Title="Date Requested" FilterEditorType="@GridFilterEditorType.DatePicker"
                            DisplayFormat="{0:MMMM dd, yyyy}">

                    <FilterCellTemplate>
                        <TelerikDatePicker Value="@SelectedDate" ShowWeekNumbers="true"
                            ValueChanged="@(async (DateTime? val) =>
                                        {
                                           SelectedDate = val;

                                           if (SelectedDate != null)
                                           {
                                              await context.ClearFilterAsync();
                                           }

                                           SetDateFilter(context.FilterDescriptor);

                                           await context.FilterAsync();

                                       })">

                        </TelerikDatePicker>

                        <TelerikButton ButtonType="ButtonType.Button"
                                       Class="k-clear-button-visible ml-sm"
                                       Icon="@SvgIcon.FilterClear"
                                       Enabled="@(SelectedDate.HasValue)"
                                       OnClick="@(async () =>
                                            {
                                              SelectedDate = null;

                                              SetDateFilter(context.FilterDescriptor);

                                              await context.ClearFilterAsync();
                                            })">
                        </TelerikButton>
                    </FilterCellTemplate>

                </GridColumn>
                <GridColumn Field=@nameof(EmployeeModel.Purpose) Title="Purpose" />
                <GridColumn Field=@nameof(EmployeeModel.Status) Title="Status" Filterable="@IsFilterable">
                 
                    <FilterCellTemplate>
                        <TelerikDropDownList Data="@StatusList"
                                             Value="@SelectedStatus"
                                             ValueField="string"
                                             TextField="string"
                                             DefaultText="Select Status"
                                             Width="100%"
                                             FilterOperator="@StringFilterOperator.Contains"
                                             ValueChanged="@(async (string val) =>
                                               {
                                                  SelectedStatus = val;

                                                  if (SelectedDate != null)
                                                  {
                                                     await context.ClearFilterAsync();
                                                  }

                                                  SetStatusFilter(context.FilterDescriptor);

                                                  await context.FilterAsync();

                                               })">
                        </TelerikDropDownList>
                        <TelerikButton ButtonType="ButtonType.Button"
                                       Class="k-clear-button-visible ml-sm"
                                       Icon="@SvgIcon.FilterClear"
                                       Enabled="@(!string.IsNullOrEmpty(SelectedStatus))"
                                       OnClick="@(async () =>
                                           {
                                              SelectedStatus = string.Empty;

                                              SetStatusFilter(context.FilterDescriptor);

                                              await context.ClearFilterAsync();

                                           })">
                        </TelerikButton>
                    </FilterCellTemplate>
                </GridColumn>
            </GridColumns>
        </TelerikGrid>

        }
        else if (RequestRecords != null && XSmall)
        {
        <TelerikGrid TItem="EmployeeModel"
                     @bind-PageSize="@PageSize"
                     Height="@GridHeight"
                     FilterMode="GridFilterMode.FilterRow"
                     Sortable=true
                     Pageable=true
                     Data="RequestRecords" 
                     @ref="GridRef"
                     Context="item"
                     OnRowClick="GoToSelectedItemOverview">
            <GridSettings>
                <GridPagerSettings PageSizes="@PageSizes">
                </GridPagerSettings>
            </GridSettings>
            <DetailTemplate>
                @{
            var prop = item as EmployeeModel;
                    <div class="d-flex flex-column">
                        <p><b>Status: </b>@item.Status</p>
                        <p><b>Control Number: </b>@item.ControlNumber</p>
                        <p><b>Purpose: </b>@item.Purpose</p>
                        <p><b>Date Requested: </b>@(GenericHelper.GetDateDisplay(item.DateRequested))</p>
                    </div>
                }
            </DetailTemplate>
            <GridColumns>
                <GridColumn Field=@nameof(EmployeeModel.FullName) Title="Full Name" />
            </GridColumns>
        </TelerikGrid>
        }
        else
        {
            <span>No Data to display.</span>
        }
 
        </div>;
    }
}

<style>
    .k-grid .k-table-row {
        cursor: pointer;
    }

    .k-tabstrip-top > .k-tabstrip-items-wrapper .k-item:active, .k-tabstrip-top > .k-tabstrip-items-wrapper .k-item.k-active {
        box-shadow: none;
    }
</style>