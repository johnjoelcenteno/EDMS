@using DPWH.EDMS.Api.Contracts
@using DPWH.EDMS.Client.Shared.Enums
@using DPWH.EDMS.Components.Helpers
@using DPWH.EDMS.Shared.Enums
@inherits RequestFormBase

<EdmsLoader Visible="@IsLoading" />

<EditForm Model="SelectedItem" OnSubmit="@HandleOnSubmitCallback">
    <FluentValidationValidator @ref="FluentValidationValidator" DisableAssemblyScanning="@true"></FluentValidationValidator>
    <TelerikCard Class="edms-card-form">
        <CardBody>
            <div class="d-flex flex-row">
                <p Class="mb-0 py-1 fw-bold">Request Details</p>
            </div>
            <CardSeparator Class="my-2"></CardSeparator>
            <div class="form-group">
                <div class="row m-0">
                    <div class="col-md-6 col-12 p-2">
                        <label for="controlNumber">Control Number</label>
                        <input id="controlNumber" class="form-control text-muted" value="Auto Generated" disabled />
                    </div>
                    <div class="col-md-6 col-12 p-2">
                        <label for="dateRequested">Date and Time Requested</label>
                        <TelerikDateTimePicker @bind-Value="SelectedItem.DateRequested" />
                        <ValidationMessage For="@(() => SelectedItem.DateRequested)" class="text-danger" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row m-0">
                    <div class="col-md-6 col-12 p-2">
                        <label for="employeeName">Employee Name</label>
                        <InputText id="employeeName" class="form-control" @bind-Value="SelectedItem.FullName" />
                        <ValidationMessage For="@(() => SelectedItem.FullName)" class="text-danger" />
                    </div>
                    <div class="col-md-6 col-12 p-2">
                        @* <label for="employeeNo">Employee No.</label> *@
                        <label for="employeeEmail">Employee Email</label>
                        <InputText id="employeeEmail" class="form-control" @bind-Value="SelectedItem.Email" />
                        <ValidationMessage For="@(() => SelectedItem.Email)" class="text-danger" />
                    </div>                    
                </div>
            </div>
            @* <div class="form-group p-2">
            <label>Inactive or Active</label>
            <div>
            <TelerikSwitch Class="float-right" @bind-Value="@SelectedItem.IsActiveEmployee"></TelerikSwitch>
            </div>
            <ValidationMessage For="@(() => SelectedItem.IsActiveEmployee)" class="text-danger" />
            </div> *@

            <div class="form-group p-2">
                <label>Who will be claiming the document?</label>
                <div>
                    <div class="k-form-field-wrap">
                        <TelerikRadioGroup Layout="@RadioGroupLayout.Horizontal" Data="@DocumentClaimants"
                                           @bind-Value="@SelectedItem.Claimant" Context="radioContext">
                            <ItemTemplate>
                                @{
                                    var ctx = radioContext;
                                }
                                @(ctx == ClaimantTypes.AuthorizedRepresentative.ToString() ? "Authorize Representative" : "Requestor")
                            </ItemTemplate>
                        </TelerikRadioGroup>
                    </div>
                </div>
                <ValidationMessage For="@(() => SelectedItem.Claimant)" class="text-danger" />
            </div>

            @if (SelectedItem.Claimant == DocumentClaimant.AuthorizedRepresentative.ToString())
            {
                <div class="form-group p-2">
                    <label for="authorizedRepresentative">Authorized Representative</label>
                    <InputText id="authorizedRepresentative" class="form-control" @bind-Value="SelectedItem.AuthorizedRepresentative" />
                    <ValidationMessage For="@(() => SelectedItem.AuthorizedRepresentative)" class="text-danger" />
                </div>
                <div class="form-group p-2">
                    <label for="validIdType">Valid ID</label>
                    <TelerikDropDownList Data="@ValidIDsList"
                                         @bind-Value="SelectedValidIdTypeId"
                                         ValueField="@nameof(GetValidIDsResult.Id)"
                                         TextField="@nameof(GetValidIDsResult.Name)"
                                         DefaultText="Select" />
                    <TelerikFileSelect AllowedExtensions="@AllowedExtensions"
                                       OnSelect="@OnSelectValidId"
                                       OnRemove="@OnRemoveValidId"
                                       MaxFileSize="@MaxFileSize"
                                       MinFileSize="@MinFileSize"
                                       Multiple="false"
                                       Class="mt-2"
                                       Enabled="GenericHelper.IsGuidHasValue(SelectedValidIdTypeId)">
                        <SelectFilesButtonTemplate>
                            <TelerikSvgIcon Icon="@SvgIcon.Upload" />
                            Upload Valid ID
                        </SelectFilesButtonTemplate>
                    </TelerikFileSelect>
                    @if (!IsValidIdValid())
                    {
                        <div class="text-danger">The Valid ID is required.</div>
                    }
                    @* <ValidationMessage For="@(() => SelectedItem.IsValidIdAccepted)" class="text-danger" /> *@
                </div>
                <div class="form-group p-2">
                    <label for="suppDocType">Authorization Document</label>
                    <TelerikDropDownList Data="@AuthorizeDocTypeList"
                                         @bind-Value="SelectedAuthorizedDocTypeId"
                                         ValueField="@nameof(GetAuthorizationDocumentsResult.Id)"
                                         TextField="@nameof(GetAuthorizationDocumentsResult.Name)"
                                         DefaultText="Select" />
                    <TelerikFileSelect AllowedExtensions="@AllowedExtensions"
                                       OnSelect="@OnSelectAuthorizedDocument"
                                       OnRemove="@OnRemoveAuthorizedDocument"
                                       MaxFileSize="@MaxFileSize"
                                       MinFileSize="@MinFileSize"
                                       Multiple="false"
                                       Class="mt-2"
                                       Enabled="GenericHelper.IsGuidHasValue(SelectedAuthorizedDocTypeId)">
                        <SelectFilesButtonTemplate>
                            <TelerikSvgIcon Icon="@SvgIcon.Upload" />
                            Upload Authorize Document
                        </SelectFilesButtonTemplate>
                    </TelerikFileSelect>
                    @if (!IsAuthorizedDocumentValid())
                    {
                        <div class="text-danger">The Authorized Document is required.</div>
                    }
                    @* <ValidationMessage For="@(() => SelectedItem.IsValidIdAccepted)" class="text-danger" /> *@
                </div>
            }

            <div class="form-group">
                <div class="row m-0">
                    <label for="recordsRequested" class="px-2 pt-3">Record/s to be Requested</label>
                    <div class="col-md-6 col-12 p-2">
                        <label for="recordsRequested">DPWH Issuance</label>
                        <TelerikMultiSelect Data="@IssuanceList"
                                            @bind-Value="@SelectedIssuanceList"
                                            ValueField="@nameof(GetLookupResult.Id)"
                                            TextField="@nameof(GetLookupResult.Name)"
                                            OnChange="HandleRequestRecords"
                                            Placeholder="-">
                        </TelerikMultiSelect>
                    </div>
                    <div class="col-md-6 col-12 p-2">
                        <label for="recordsRequested">Employee Record</label>
                        <TelerikMultiSelect Data="@EmployeeRecordList"
                                            @bind-Value="@SelectedEmployeeRecordList"
                                            ValueField="@nameof(GetLookupResult.Id)"
                                            TextField="@nameof(GetLookupResult.Name)"
                                            OnChange="HandleRequestRecords"
                                            Placeholder="-">
                        </TelerikMultiSelect>                        
                    </div>
                    <div class="col-12 p-2 pt-0">
                        <ValidationMessage For="@(() => SelectedItem.RequestedRecords)" class="text-danger" />
                    </div>
                </div>
            </div>

            <div class="form-group p-2">
                <label for="remarks">Purpose</label>
                <TelerikDropDownList Data="@PurposeList"
                                     @bind-Value="SelectedItem.Purpose"
                                     ValueField="@nameof(GetLookupResult.Name)"
                                     TextField="@nameof(GetLookupResult.Name)"
                                     DefaultText="Select" />
                <ValidationMessage For="@(() => SelectedItem.Purpose)" class="text-danger" />
            </div>
            
            @if (IsSelectedPurposeOthers())
            {
                <div class="form-group p-2 pt-0">
                    <label for="otherPurpose"><small><i>Specify Purpose (Other)</i></small></label>
                    <InputText id="otherPurpose" class="form-control" @bind-Value="SelectedItem.OtherPurpose" />
                    <ValidationMessage For="@(() => SelectedItem.OtherPurpose)" class="text-danger" />
                </div>
            }

            <div class="form-group p-2">
                <label for="remarks">Remarks</label>
                <TelerikTextArea Rows="2" @bind-Value="SelectedItem.Remarks" />
                <ValidationMessage For="@(() => SelectedItem.Remarks)" class="text-danger" />
            </div>
        </CardBody>
    </TelerikCard>
    <div class="edms-card-form my-3">
        <div class="d-flex flex-row justify-content-between">
            <TelerikButton @onclick="HandleOnCancelCallback"
                           FillMode="@ThemeConstants.Button.FillMode.Outline" ThemeColor="@ThemeConstants.Button.ThemeColor.Secondary">
                Cancel
            </TelerikButton>
            <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">
                Submit
            </TelerikButton>
        </div>
    </div>
</EditForm>