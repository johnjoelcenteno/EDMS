@page "/my-records"
@using DPWH.EDMS.Api.Contracts
@using DPWH.EDMS.Client.Shared.Models
@using DPWH.EDMS.Components.Helpers
@using System.Globalization
@using DPWH.EDMS.Web.Client.Pages.RecordsManagement.Employee.Records.Model
@inherits RecordsBase
@inject NavigationManager Navigation
@attribute [Authorize(Policy = "RequireActiveRoles")]

<EdmsBreadcrumbs Data="@BreadcrumbItems" />
<EdmsLoader Visible="IsLoading" />

<h3>My Records</h3>
<div class="d-flex flex-row align-items-center mb-2">
    <p class="fs-5">@DisplayName</p>
    <span class="role-chip">@Role</span>
</div>
<hr />
<TelerikMediaQuery Media="(max-width: 480px)" OnChange="((changed) => XSmall = changed)"></TelerikMediaQuery>

<div class="d-flex flex-row mt-3">
    <TelerikCard Width="100%">
        <CardBody>
            <div class="d-flex flex-row justify-content-between">
                <CardTitle Class="mb-0">Record Lists</CardTitle>
            </div>
            <CardSeparator Class="my-2"></CardSeparator>
            <div class="mobile-property-grid">

                @if (GetEmployeeRecords.Data != null && !XSmall)
                {
                    @*  <div class="d-flex flex-row justify-content-end">
                <TelerikButton Class="mb-2"
                Icon="@FontIcon.Plus"
                ThemeColor="@ThemeConstants.Button.ThemeColor.Primary"
                OnClick="GoToAddNewRecord">
                Add Request
                </TelerikButton>
                </div> *@
                    <TelerikGrid TItem="GetLookupResult"
                                 @bind-PageSize="@PageSize"
                                 Height="@GridHeight"
                                 FilterMode="GridFilterMode.FilterRow"
                                 Sortable=true
                                 Pageable=true
                                 Data="GetEmployeeRecords.Data"
                                 OnStateChanged="@OnStateChanged"
                                 @ref="GridRef"
                                 Context="docversion">
                        <GridSettings>
                            <GridPagerSettings PageSizes="@PageSizes">
                            </GridPagerSettings>
                        </GridSettings>
                        <DetailTemplate>
                            @{
                                var recordType = docversion as GetLookupResult;
                                var recordVersions = RecordDocuments.Where(x => x.RecordTypeId == recordType.Id).OrderByDescending(x => DateTime.ParseExact(x.DocVersion, "MMddyyyy", null)).ToList();
                                @if (recordVersions != null && recordVersions.Count > 0)
                                {

                                    <TelerikGrid Class="grid-no-scroll"
                                                 TItem="RecordDocumentModel"
                                                 @bind-PageSize="@pageAction"
                                                 Height="@GridHeight"
                                                 FilterMode="@GridFilterMode.FilterRow"
                                                 Sortable=true
                                                 Pageable=true
                                                 Data="recordVersions">
                                        <GridSettings>
                                            <GridPagerSettings PageSizes="@PageSizesChild">
                                            </GridPagerSettings>
                                        </GridSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(RecordDocumentModel.DocVersion) Title="Document Version">
                                                <Template>
                                                    @{
                                                        var data = context as RecordDocumentModel;
                                                        var date = DateTime.ParseExact(data!.DocVersion, "MMddyyyy", CultureInfo.InvariantCulture);
                                                        <p>@GenericHelper.GetDateDisplay(date)</p>
                                                    }
                                                </Template>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(RecordDocumentModel.RecordName) Title="Document Name" />

                                            <GridColumn Width="5%">
                                                <Template>
                                                    @{
                                                        var data = context as RecordDocumentModel;
                                                        if (data != null)
                                                        {
                                                            <div class="d-flex justify-content-center">
                                                                <NavLink class="fw-bolder custom-button" href="@data.RecordUri" target="_blank">View</NavLink>
                                                            </div>
                                                        }
                                                    }
                                                    

                                                </Template>
                                            </GridColumn>
                                            <GridColumn Width="5%">
                                                <Template>
                                                    @{
                                                        var data = context as RecordDocumentModel;
                                                        if(data != null)
                                                        {
                                                            <div class="d-flex justify-content-center">
                                                                <NavLink class="fw-bolder custom-button" style="cursor: pointer;" @onclick="@(() => DownloadFromStream(data.RecordUri, $"{data.RecordName}.pdf"))">Export</NavLink>
                                                            </div>
                                                             
                                                            //<TelerikButton OnClick="@(() => DownloadFromStream(data.RecordUri, $"{data.RecordName}.pdf"))">Export</TelerikButton>
                                                        }
                                                    }
                                                     
                                                </Template>
                                            </GridColumn>
                                        </GridColumns>
                                    </TelerikGrid>
                                }
                                else
                                {
                                    <div class="d-flex justify-content-around">
                                        <span>No Data to display.</span>
                                    </div>
                                }
                            }
                        </DetailTemplate>
                        <GridColumns>
                            <GridColumn Field=@nameof(GetLookupResult.Name) Title="Document Name">
                                <Template>
                                    @{
                                        var data = context as GetLookupResult;

                                        if (data != null)
                                        {
                                            var recordVersions = RecordDocuments.Where(x => x.RecordTypeId == data.Id).ToList();

                                            <p>@data.Name <span class="versions fw-bolder">@(recordVersions.Count > 0 ? recordVersions.Count : "")</span></p>
                                        }
                                    }

                                </Template>
                            </GridColumn>
                        </GridColumns>
                    </TelerikGrid>
                }
                else if (GetEmployeeRecords.Data != null && XSmall)
                {
                    <TelerikGrid TItem="GetLookupResult"
                                 @bind-PageSize="@PageSize"
                                 Height="@GridHeight"
                                 FilterMode="GridFilterMode.FilterRow"
                                 Sortable=true
                                 Pageable=true
                                 Data="GetEmployeeRecords.Data"
                                 Context="employee">
                        <GridSettings>
                            <GridPagerSettings PageSizes="@PageSizes">
                            </GridPagerSettings>
                        </GridSettings>
                        <DetailTemplate>
                            @{
                                var recordType = employee as GetLookupResult;
                                var recordVersions = RecordDocuments.Where(x => x.RecordTypeId == recordType.Id).ToList();
                                @if (recordVersions != null && recordVersions.Count > 0)
                                {
                                    <TelerikGrid Class="grid-no-scroll"
                                                 TItem="RecordDocumentModel"
                                                 @bind-PageSize="@pageAction"
                                                 Height="@GridHeight"
                                                 FilterMode="@GridFilterMode.FilterRow"
                                                 Sortable=true
                                                 Pageable=true
                                                 Data="recordVersions">
                                        <GridSettings>
                                            <GridPagerSettings PageSizes="@PageSizesChild">
                                            </GridPagerSettings>
                                        </GridSettings>
                                        <GridColumns>

                                            <GridColumn Field=@nameof(RecordDocumentModel.RecordName) Title="Document Name">
                                                <Template>
                                                    @{
                                                        var record = context as RecordDocumentModel;
                                                    }
                                                    <div class="d-flex justify-content-center">
                                                        <a class="fw-bolder text-decoration-underline" target="_blank" href="@($"my-records/{recordType.Id}")">@record!.RecordName</a>
                                                    </div>
                                                </Template>
                                            </GridColumn>

                                        </GridColumns>
                                    </TelerikGrid>
                                }
                                else
                                {
                                    <div class="d-flex justify-content-around">
                                        <span>No Data to display.</span>
                                    </div>
                                }
                            }
                        </DetailTemplate>
                        <GridColumns>
                            <GridColumn Field=@nameof(GetLookupResult.Name) Title="Document Name" />
                        </GridColumns>
                    </TelerikGrid>
                }
                else
                {
                    <span>No Data to display.</span>
                }
            </div>


         </CardBody>
    </TelerikCard>
 </div>
 <style>
    .role-chip {
        background-color: #38339b;
        color: #fff;
        font-size: 12px;
        border-radius: 25px;
        padding: 3px 16px;
        margin: 0 10px;
    }

    .mobile-property-grid .k-hierarchy-cell .k-svg-i-plus svg path {
        d: path('M352 256 160 384V128l192 128z');
        fill: #7f56d9;
    }

    .mobile-property-grid .k-hierarchy-cell .k-svg-i-minus svg path {
        d: path('M256 352 128 160h256L256 352z');
        fill: #7f56d9;
    }

    .grid-no-scroll .k-grid-content {
        overflow-y: auto;
    }

    .grid-no-scroll .k-grid-header,
    .grid-no-scroll .k-grid-footer {
        padding-right: 0; /* version 2.26 and older requires !important here */
    }

    .grid-no-scroll .k-grid-header-wrap,
    .grid-no-scroll .k-grid-footer-wrap {
        border-right-width: 0;
    }

    .k-grid a {
        color: #38339B;
        text-decoration: none;
    }
    .versions{
        color: #38339B;
    }

    .custom-button {
        background-color: #f6f0ff;
        border: none;
        padding: 10px 10px;
        font-size: 16px;
        font-weight: bold;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.3s;
    }

        .custom-button:hover {
            background-color: #edcfff;
            transform: scale(1.05);
        }
</style>