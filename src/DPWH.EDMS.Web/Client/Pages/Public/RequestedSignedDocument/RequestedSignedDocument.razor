@page "/requested-signed-document/{Id}/{DocumentId}"
@page "/requested-signed-document"
@inject NavigationManager NavManager
@using EDMS.Api.Contracts
@using DPWH.EDMS.Web.Client.Shared.Services.ExceptionHandler
@using DPWH.EDMS.Client.Shared.APIClient.Services.RequestManagement
@using Blazored.Toast.Services

<TelerikMediaQuery Media="(max-width: 480px)" OnChange="((changed) => XSmall = changed)"></TelerikMediaQuery>
 
<EdmsLoader Visible="@IsLoading" />


@if (RequestedRecord != null)
{
    <div class="d-flex justify-content-center pt-3 mt-5" style="width: 22cm; margin-left: auto; margin-right: auto;">
       
        <div class="row text-center">
            <div class="col-12">
                <h3>@RequestedRecord.RecordType</h3>

            </div>
            <div class="col-12">
                <p>@(RequestedRecord.DocumentType == "MC" ? "Machine Copy from Original File" : "Certified True Copy")</p>
            </div>
        </div>

    </div>
    <div class="container page-legal-size">
        @if (!string.IsNullOrEmpty(RequestedRecord.Uri))
        {
            <iframe src="@($"{RequestedRecord.Uri}?t={DateTime.Now.Ticks}")"
                    height="100%"
                    width="100%"
                    title="@RequestedRecord.RecordType"></iframe>

        }
    </div>

}
 

<style>
    .page-legal-size {
        height: 1108px;
        padding: 0.8cm;
        width: 834px;
        margin: 1cm auto;
        font-size: 14px;
        border: 1px #D3D3D3 solid;
        border-radius: 5px;
        background: white;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }
</style>
@code {
    [Parameter] public required string Id { get; set; }
    [Parameter] public required string DocumentId { get; set; }
    [Inject] public required IExceptionHandlerService ExceptionHandlerService { get; set; }
    [Inject] public required IRequestManagementService RequestManagementService { get; set; }
    [Inject] public required IToastService ToastService { get; set; }
    protected bool IsSigning { get; set; } = false;
    protected bool XSmall { get; set; }
    protected bool IsLoading { get; set; }
    protected string CancelReturnUrl = string.Empty;
    protected RequestedRecordModel RequestedRecord { get; set; } = new();
    protected RecordRequestModel SelectedRecordRequest { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {
        IsLoading = true;

        await LoadData(async (res) =>
          {
              SelectedRecordRequest = res;
              if (SelectedRecordRequest != null)
              {
                  LoadDocument(SelectedRecordRequest);

              }
          });

        IsLoading = false;
    }
    protected async void LoadDocument(RecordRequestModel data)
    {
        var guid = Guid.Parse(DocumentId);
        var document = data.RequestedRecords.FirstOrDefault(x => x.Id == guid);
        if (document != null)
        {
            RequestedRecord = document;

        }
        if (string.IsNullOrEmpty(RequestedRecord.Uri))
        {
            NavManager.NavigateTo("/404");
        }

        StateHasChanged();
    }
    protected async Task LoadData(Action<RecordRequestModel> onLoadCb)
    {
        await ExceptionHandlerService.HandleApiException(async () =>
        {
            var recordReq = await RequestManagementService.GetById(Guid.Parse(Id));

            if (recordReq.Success)
            {
                if (onLoadCb != null)
                {
                    onLoadCb.Invoke(recordReq.Data);
                }
            }
            else
            {
                ToastService.ShowError("Something went wrong on loading record request.");
                NavManager.NavigateTo(CancelReturnUrl);
            }
        });
    }
}
